// Generated by CoffeeScript 1.7.1
var Formula;

Formula = (function() {
  function Formula(parent) {
    this.parent = parent != null ? parent : null;
    this.head = new Init();
    this.tail = this.head;
  }

  Formula.prototype.setParent = function(parent) {
    this.parent = parent;
  };

  Formula.prototype.getParent = function() {
    return this.parent;
  };

  Formula.prototype["new"] = function(el, after) {
    var _ref;
    if (!after) {
      this.tail.setNext(el);
      el.setPrevious(this.tail);
      return this.tail = el;
    } else {
      if ((_ref = after.getNext()) != null) {
        _ref.setPrevious(el);
      }
      el.setNext(after.getNext());
      after.setNext(el);
      return el.setPrevious(after);
    }
  };

  Formula.prototype.newBefore = function(el, before) {
    if (!before) {
      this.head.setPrevious(el);
      el.setNext(this.head);
      return this.head = el;
    } else {
      before.getPrevious().setNext(el);
      el.setPrevious(before.getPrevious());
      before.setPrevious(el);
      return el.setNext(before);
    }
  };

  Formula.prototype.newAtStart = function(el) {
    return this["new"](el, this.head);
  };

  Formula.prototype.swap = function(el1, el2) {
    if (el1.getNext() === el2) {
      el1.setNext(el2.getNext());
      el1.setPrevious(el2);
      el2.setNext(el1);
      return el2.setPrevious(el1.getPrevios());
    } else {
      throw 'Formula(swap): wrong elements given';
    }
  };

  Formula.prototype.remove = function(el) {
    el.getPrevious().setNext(el.getNext());
    return el.getNext().setPrevious(el.getPrevious());
  };

  Formula.prototype.solve = function() {
    var cur, res, tmp, _ref, _ref1, _ref2;
    cur = this.head;
    while (true) {
      if (cur instanceof NumberObj) {
        _ref = this.getNumber(cur), tmp = _ref['cur'], res = _ref['res'];
        res = new Result(res, cur.getPrevious(), tmp != null ? tmp.getNext() : void 0);
        if (tmp != null) {
          if ((_ref1 = tmp.getNext()) != null) {
            _ref1.setPreviousResult(res);
          }
        }
        cur.getPrevious().setNextResult(res);
        cur = tmp;
      } else {
        cur.setNextResult(cur.getNext());
        if ((_ref2 = cur.getNext()) != null) {
          _ref2.setPreviousResult(cur);
        }
      }
      cur = cur != null ? cur.getNext() : void 0;
      if (!cur) {
        break;
      }
    }
    this.beforeFunction(this.head, {
      'SIN': function(a) {
        return Math.sin(a);
      },
      'COS': function(a) {
        return Math.cos(a);
      },
      'TAN': function(a) {
        return Math.tan(a);
      },
      'LOG': function(a) {
        return Math.log(a);
      }
    });
    this.twoSideOperand(this.head, {
      'POW': function(a, b) {
        return Math.pow(a, b);
      }
    });
    this.twoSideOperand(this.head, {
      'TIMES': function(a, b) {
        return a * b;
      },
      'DIVIDE': function(a, b) {
        return a / b;
      },
      'MOD': function(a, b) {
        return a % b;
      }
    });
    this.twoSideOperand(this.head, {
      'MINUS': function(a, b) {
        return a - b;
      },
      'PLUS': function(a, b) {
        return a + b;
      },
      'AND': function(a, b) {
        return a & b;
      },
      'XOR': function(a, b) {
        return a ^ b;
      },
      'OR': function(a, b) {
        return a | b;
      }
    });
    return this.head.getNextResult().getValue();
  };

  Formula.prototype.beforeFunction = function(cur, func) {
    var cur_func, l, r, res, _ref, _results;
    _results = [];
    while (cur) {
      if (cur instanceof Function) {
        cur_func = cur.getValue();
        if (func.hasOwnProperty(cur_func)) {
          l = cur.getPreviousResult();
          r = cur.getNextResult();
          res = new Result(func[cur_func](r.getValue()), l.getPreviousResult(), r.getNextResult());
          l.setNextResult(res);
          if ((_ref = r.getNextResult()) != null) {
            _ref.setPreviousResult(res);
          }
        }
      }
      _results.push(cur = cur != null ? cur.getNextResult() : void 0);
    }
    return _results;
  };

  Formula.prototype.twoSideOperand = function(cur, oper) {
    var l, operand, r, res, _ref, _ref1, _results;
    _results = [];
    while (cur) {
      if (cur instanceof Operand) {
        operand = cur.getValue();
        if (oper.hasOwnProperty(operand)) {
          l = cur.getPreviousResult();
          r = cur.getNextResult();
          res = new Result(oper[operand](l.getValue(), r.getValue()), l.getPreviousResult(), r.getNextResult());
          if ((_ref = l.getPreviousResult()) != null) {
            _ref.setNextResult(res);
          }
          if ((_ref1 = r.getNextResult()) != null) {
            _ref1.setPreviousResult(res);
          }
        }
      }
      _results.push(cur = cur != null ? cur.getNextResult() : void 0);
    }
    return _results;
  };

  Formula.prototype.getNumber = function(cur) {
    var res;
    if (cur instanceof Brackets) {
      cur = cur.getNext();
      res = cur.getValue();
    } else {
      res = '';
      while (true) {
        if (cur.getValue() === 'FLOATPOINT') {
          res += '.';
          if (!cur.getNext()) {
            throw 'Invalid number';
          }
        } else {
          res += cur.getValue();
        }
        if (!(cur.getNext() instanceof NumberObj)) {
          break;
        }
        cur = cur.getNext();
      }
      res = parseFloat(res);
    }
    return {
      'res': res,
      'cur': cur
    };
  };

  Formula.prototype.display = function() {
    var cur, form;
    if (this.head !== this.tail) {
      cur = this.head.getNext();
      form = cur.getHTML();
      while ((cur = cur.getNext()) !== null) {
        $.merge(form, cur.getHTML());
      }
      return form;
    } else {
      return $('');
    }
  };

  return Formula;

})();
