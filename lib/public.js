// Generated by CoffeeScript 1.7.1
var Element;

Element = (function() {
  function Element(display) {
    this.display = display != null ? display : 'basic';
    this.next = null;
  }

  Element.prototype.getHTML = function() {
    return $("<span class=\'" + this.display + "\'></span>");
  };

  Element.prototype.getPrevious = function() {
    return this.previous;
  };

  Element.prototype.setPrevious = function(previous) {
    this.previous = previous;
  };

  Element.prototype.getNext = function() {
    return this.next;
  };

  Element.prototype.setNext = function(next) {
    this.next = next;
  };

  Element.prototype.getValue = function() {
    return null;
  };

  Element.prototype.setNextResult = function(nextResult) {
    this.nextResult = nextResult;
  };

  Element.prototype.setPreviousResult = function(previousResult) {
    this.previousResult = previousResult;
  };

  Element.prototype.getNextResult = function() {
    return this.nextResult;
  };

  Element.prototype.getPreviousResult = function() {
    return this.previousResult;
  };

  return Element;

})();
// Generated by CoffeeScript 1.7.1
var Init,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Init = (function(_super) {
  __extends(Init, _super);

  function Init() {
    Init.__super__.constructor.call(this, 'init', null);
  }

  Init.prototype.getHTML = function() {
    return null;
  };

  return Init;

})(Element);
// Generated by CoffeeScript 1.7.1
var Function,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Function = (function(_super) {
  __extends(Function, _super);

  function Function(display, type) {
    this.display = display != null ? display : 'basic';
    this.type = type;
    Function.__super__.constructor.apply(this, arguments);
    if (!window.HTML_FUNCTIONS.hasOwnProperty(this.type)) {
      throw 'Operand (constructor): wrong type of operand';
    }
  }

  Function.prototype.getHTML = function() {
    return Function.__super__.getHTML.apply(this, arguments).addClass('func').html(window.HTML_FUNCTIONS[this.type]);
  };

  Function.prototype.getValue = function() {
    return this.type;
  };

  return Function;

})(Element);
// Generated by CoffeeScript 1.7.1
var Operand,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Operand = (function(_super) {
  __extends(Operand, _super);

  function Operand(display, type) {
    this.display = display != null ? display : 'basic';
    this.type = type;
    Operand.__super__.constructor.apply(this, arguments);
    if (!window.HTML.hasOwnProperty(this.type)) {
      throw 'Operand (constructor): wrong type of operand';
    }
  }

  Operand.prototype.getHTML = function() {
    return Operand.__super__.getHTML.apply(this, arguments).html(window.HTML[this.type]);
  };

  Operand.prototype.getValue = function() {
    return this.type;
  };

  return Operand;

})(Element);
// Generated by CoffeeScript 1.7.1
var Variable,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Variable = (function(_super) {
  __extends(Variable, _super);

  function Variable(display, name, formula) {
    this.display = display != null ? display : 'basic';
    this.name = name;
    this.formula = formula;
    Variable.__super__.constructor.apply(this, arguments);
  }

  Variable.prototype.getHTML = function() {
    return Variable.__super__.getHTML.apply(this, arguments).html(this.name);
  };

  Variable.prototype.getValue = function() {
    return this.formula.solve();
  };

  return Variable;

})(Element);
// Generated by CoffeeScript 1.7.1
var Constant,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Constant = (function(_super) {
  __extends(Constant, _super);

  function Constant(display, name, value) {
    this.display = display != null ? display : 'basic';
    this.name = name;
    this.value = value;
    Constant.__super__.constructor.apply(this, arguments);
  }

  Constant.prototype.getValue = function() {
    return this.value;
  };

  return Constant;

})(Variable);
// Generated by CoffeeScript 1.7.1
var NumberObj,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

NumberObj = (function(_super) {
  __extends(NumberObj, _super);

  function NumberObj(display, n) {
    var _ref;
    this.display = display != null ? display : 'basic';
    this.n = n;
    if (!((0 <= (_ref = this.n) && _ref <= 9) || this.n === 'FLOATPOINT')) {
      throw 'number(3): Not number passed to the Number class constructor';
    }
    NumberObj.__super__.constructor.apply(this, arguments);
  }

  NumberObj.prototype.getHTML = function() {
    return NumberObj.__super__.getHTML.apply(this, arguments).html(this.n !== 'FLOATPOINT' ? this.n : ',');
  };

  NumberObj.prototype.getValue = function() {
    return this.n;
  };

  return NumberObj;

})(Element);
// Generated by CoffeeScript 1.7.1
var Block,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Block = (function(_super) {
  __extends(Block, _super);

  function Block(display, formula) {
    this.display = display != null ? display : 'basic';
    this.formula = formula;
    Block.__super__.constructor.apply(this, arguments);
  }

  Block.prototype.getHTML = function() {
    return Block.__super__.getHTML.apply(this, arguments);
  };

  Block.prototype.getValue = function() {
    return this.formula.solve();
  };

  Block.prototype.getFormula = function() {
    return this.formula;
  };

  Block.prototype.setFormula = function(formula) {
    this.formula = formula;
  };

  return Block;

})(Element);
// Generated by CoffeeScript 1.7.1
var Brackets,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Brackets = (function(_super) {
  __extends(Brackets, _super);

  function Brackets(display, formula) {
    this.display = display != null ? display : 'basic';
    this.formula = formula;
    Brackets.__super__.constructor.apply(this, arguments);
  }

  Brackets.prototype.getHTML = function() {
    return $("<span type=\'" + this.display + "\'>(</span>").add(Brackets.__super__.getHTML.apply(this, arguments).addClass('brackets').html(this.formula.display())).add("<span type=\'" + this.display + "\'>)</span>");
  };

  return Brackets;

})(Block);
// Generated by CoffeeScript 1.7.1
var Cursor,
  __slice = [].slice;

Cursor = (function() {
  function Cursor(formula) {
    this.formula = formula;
    this.position = this.formula;
    this.displayPosition = 'basic';
  }

  Cursor.prototype.getHigher = function() {
    if (this.position.parent) {
      this.position = this.position.parent;
    }
    return !!this.position.parent;
  };

  Cursor.prototype["new"] = function(el) {
    return this.position["new"](el);
  };

  Cursor.prototype.newAtStart = function(el) {
    return this.position.newAtStart(el);
  };

  Cursor.prototype.newFormula = function() {
    this.formula = new Formula();
    this.position = this.formula;
    return this.displayPosition = 'block';
  };

  Cursor.prototype.newBlock = function(block) {
    this["new"](block);
    block.getFormula().setParent(this.formula);
    return this.position = block.getFormula();
  };

  Cursor.prototype.display = function() {
    return this.formula.display();
  };

  Cursor.prototype.solve = function() {
    return this.formula.solve();
  };

  Cursor.prototype.formulaInBlock = function() {
    var beginning, block, x, _i, _len;
    block = arguments[0], beginning = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    block.setFormula(this.formula);
    this.newFormula();
    block.getFormula().setParent(this.formula);
    for (_i = 0, _len = beginning.length; _i < _len; _i++) {
      x = beginning[_i];
      this["new"](x);
    }
    this["new"](block);
    return this.position = block.getFormula();
  };

  return Cursor;

})();
// Generated by CoffeeScript 1.7.1
var Formula;

Formula = (function() {
  function Formula(parent) {
    this.parent = parent != null ? parent : null;
    this.head = new Init();
    this.tail = this.head;
  }

  Formula.prototype.setParent = function(parent) {
    this.parent = parent;
  };

  Formula.prototype.getParent = function() {
    return this.parent;
  };

  Formula.prototype["new"] = function(el, after) {
    var _ref;
    if (!after) {
      this.tail.setNext(el);
      el.setPrevious(this.tail);
      return this.tail = el;
    } else {
      if ((_ref = after.getNext()) != null) {
        _ref.setPrevious(el);
      }
      el.setNext(after.getNext());
      after.setNext(el);
      return el.setPrevious(after);
    }
  };

  Formula.prototype.newBefore = function(el, before) {
    if (!before) {
      this.head.setPrevious(el);
      el.setNext(this.head);
      return this.head = el;
    } else {
      before.getPrevious().setNext(el);
      el.setPrevious(before.getPrevious());
      before.setPrevious(el);
      return el.setNext(before);
    }
  };

  Formula.prototype.newAtStart = function(el) {
    return this["new"](el, this.head);
  };

  Formula.prototype.swap = function(el1, el2) {
    if (el1.getNext() === el2) {
      el1.setNext(el2.getNext());
      el1.setPrevious(el2);
      el2.setNext(el1);
      return el2.setPrevious(el1.getPrevios());
    } else {
      throw 'Formula(swap): wrong elements given';
    }
  };

  Formula.prototype.remove = function(el) {
    el.getPrevious().setNext(el.getNext());
    return el.getNext().setPrevious(el.getPrevious());
  };

  Formula.prototype.solve = function() {
    var cur, res, tmp, _ref, _ref1, _ref2;
    cur = this.head;
    while (true) {
      if (cur instanceof NumberObj) {
        _ref = this.getNumber(cur), tmp = _ref['cur'], res = _ref['res'];
        res = new Result(res, cur.getPrevious(), tmp != null ? tmp.getNext() : void 0);
        if (tmp != null) {
          if ((_ref1 = tmp.getNext()) != null) {
            _ref1.setPreviousResult(res);
          }
        }
        cur.getPrevious().setNextResult(res);
        cur = tmp;
      } else {
        cur.setNextResult(cur.getNext());
        if ((_ref2 = cur.getNext()) != null) {
          _ref2.setPreviousResult(cur);
        }
      }
      cur = cur != null ? cur.getNext() : void 0;
      if (!cur) {
        break;
      }
    }
    this.beforeFunction(this.head, {
      'SIN': function(a) {
        return Math.sin(a);
      },
      'COS': function(a) {
        return Math.cos(a);
      },
      'TAN': function(a) {
        return Math.tan(a);
      },
      'LOG': function(a) {
        return Math.log(a);
      }
    });
    this.twoSideOperand(this.head, {
      'POW': function(a, b) {
        return Math.pow(a, b);
      }
    });
    this.twoSideOperand(this.head, {
      'TIMES': function(a, b) {
        return a * b;
      },
      'DIVIDE': function(a, b) {
        return a / b;
      },
      'MOD': function(a, b) {
        return a % b;
      }
    });
    this.twoSideOperand(this.head, {
      'MINUS': function(a, b) {
        return a - b;
      },
      'PLUS': function(a, b) {
        return a + b;
      },
      'AND': function(a, b) {
        return a & b;
      },
      'XOR': function(a, b) {
        return a ^ b;
      },
      'OR': function(a, b) {
        return a | b;
      }
    });
    return this.head.getNextResult().getValue();
  };

  Formula.prototype.beforeFunction = function(cur, func) {
    var cur_func, l, r, res, _ref, _results;
    _results = [];
    while (cur) {
      if (cur instanceof Function) {
        cur_func = cur.getValue();
        if (func.hasOwnProperty(cur_func)) {
          l = cur.getPreviousResult();
          r = cur.getNextResult();
          res = new Result(func[cur_func](r.getValue()), l.getPreviousResult(), r.getNextResult());
          l.setNextResult(res);
          if ((_ref = r.getNextResult()) != null) {
            _ref.setPreviousResult(res);
          }
        }
      }
      _results.push(cur = cur != null ? cur.getNextResult() : void 0);
    }
    return _results;
  };

  Formula.prototype.twoSideOperand = function(cur, oper) {
    var l, operand, r, res, _ref, _ref1, _results;
    _results = [];
    while (cur) {
      if (cur instanceof Operand) {
        operand = cur.getValue();
        if (oper.hasOwnProperty(operand)) {
          l = cur.getPreviousResult();
          r = cur.getNextResult();
          res = new Result(oper[operand](l.getValue(), r.getValue()), l.getPreviousResult(), r.getNextResult());
          if ((_ref = l.getPreviousResult()) != null) {
            _ref.setNextResult(res);
          }
          if ((_ref1 = r.getNextResult()) != null) {
            _ref1.setPreviousResult(res);
          }
        }
      }
      _results.push(cur = cur != null ? cur.getNextResult() : void 0);
    }
    return _results;
  };

  Formula.prototype.getNumber = function(cur) {
    var res;
    if (cur instanceof Brackets) {
      cur = cur.getNext();
      res = cur.getValue();
    } else {
      res = '';
      while (true) {
        if (cur.getValue() === 'FLOATPOINT') {
          res += '.';
          if (!cur.getNext()) {
            throw 'Invalid number';
          }
        } else {
          res += cur.getValue();
        }
        if (!(cur.getNext() instanceof NumberObj)) {
          break;
        }
        cur = cur.getNext();
      }
      res = parseFloat(res);
    }
    return {
      'res': res,
      'cur': cur
    };
  };

  Formula.prototype.display = function() {
    var cur, form;
    if (this.head !== this.tail) {
      cur = this.head.getNext();
      form = cur.getHTML();
      while ((cur = cur.getNext()) !== null) {
        $.merge(form, cur.getHTML());
      }
      return form;
    } else {
      return $('');
    }
  };

  return Formula;

})();
// Generated by CoffeeScript 1.7.1
var Result,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Result = (function(_super) {
  __extends(Result, _super);

  function Result(result, previousResult, nextResult) {
    this.result = result;
    this.previousResult = previousResult;
    this.nextResult = nextResult;
  }

  Result.prototype.getHTML = function() {
    return null;
  };

  Result.prototype.setPrevious = function() {
    return null;
  };

  Result.prototype.setNext = function() {
    return null;
  };

  Result.prototype.getValue = function() {
    return this.result;
  };

  return Result;

})(Element);
// Generated by CoffeeScript 1.7.1
var cursor, tap, upActivated;

window.HTML = {
  'MINUS': '-',
  'PLUS': '+',
  'AND': 'AND',
  'XOR': 'XOR',
  'OR': 'OR',
  'TIMES': '&times;',
  'DIVIDE': '/',
  'MOD': '%',
  'POW': '&circ;'
};

window.HTML_FUNCTIONS = {
  'SIN': 'sin',
  'COS': 'cos',
  'TAN': 'tan'
};

$(window).resize(function() {
  var size, size_text;
  size = parseInt($(window).width()) - 4;
  size_text = parseInt($(window).height()) / 15 + 'px';
  $('body').css({
    'font-size': size_text,
    'line-height': size_text
  });
  $('#cont_disp').css({
    width: size + 'px'
  });
  return $('table tr td').css({
    width: parseInt(size / 7)
  });
});

window.up = $('#UP_BTN');

upActivated = function(act) {
  if (act) {
    return window.up.removeClass('deactivated');
  } else {
    return window.up.addClass('deactivated');
  }
};

$(window).trigger('resize');

window.resultShown = false;

window.form = $('#formula');

window.formula = new Formula();

cursor = new Cursor(window.formula);

window.form.html(window.formula.display());

tap = function(obj) {
  var res, type, x, _i, _len, _ref, _ref1;
  type = $(obj.currentTarget).data('tap');
  console.log(type);
  if (window.HTML.hasOwnProperty(type)) {
    cursor["new"](new Operand(cursor.displayPosition, type));
    window.resultShown = false;
  } else if (window.HTML_FUNCTIONS.hasOwnProperty(type)) {
    if (window.resultShown) {
      cursor.formulaInBlock(new Brackets(cursor.displayPosition), new Function(cursor.displayPosition, type));
      window.resultShown = false;
    } else {
      cursor["new"](new Function(cursor.displayPosition, type));
    }
  } else if ((0 <= (_ref = parseInt(type)) && _ref <= 9) || type === 'FLOATPOINT') {
    if (window.resultShown) {
      cursor.newFormula();
      window.resultShown = false;
    }
    cursor["new"](new NumberObj(cursor.displayPosition, type));
  } else {
    switch (type) {
      case 'INVNUM':
        cursor.formulaInBlock(new Brackets(cursor.displayPosition), new NumberObj(cursor.displayPosition, '1'), new Operand(cursor.displayPosition, 'DIVIDE'));
        window.resultShown = false;
        break;
      case 'BRACKETS':
        upActivated(true);
        if (window.resultShown) {
          cursor.formulaInBlock(new Brackets(cursor.displayPosition));
          window.resultShown = false;
        } else {
          cursor.newBlock(new Brackets(cursor.displayPosition, new Formula()));
        }
        break;
      case 'SOLVE':
        res = cursor.solve();
        cursor.newFormula();
        _ref1 = String(res);
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          x = _ref1[_i];
          if (x === '-') {
            cursor["new"](new Operand(cursor.displayPosition, 'MINUS'));
          } else {
            if (x === '.') {
              x = 'FLOATPOINT';
            }
            cursor["new"](new NumberObj(cursor.displayPosition, x));
          }
        }
        window.resultShown = true;
        break;
      case 'UP':
        upActivated(cursor.getHigher());
    }
  }
  return window.form.html(cursor.display());
};

console.log('connect');

$('td').hammer({}).bind('tap', tap);
